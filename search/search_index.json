{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"PeTTa \u2014 Documentation (Beta)","text":"<p>Welcome! PeTTa is an efficient MeTTa implementation in Prolog. This documentation provides quickstart instructions, language specification, tutorials, examples, and contribution guidelines.</p>"},{"location":"index.html#quick-start","title":"Quick start","text":"<ol> <li>See Getting Started for installation.</li> <li>Try Tutorials \u2192 Hello World for a minimal example.</li> <li>For contributors, see Contributing.</li> </ol> <p>This site is generated from markdown in the <code>docs/</code> folder. To propose changes, edit the Markdown and open a PR.</p>"},{"location":"contributing.html","title":"Contributing to PeTTa","text":"<p>Thank you for your interest in contributing to PeTTa! This page provides general guidelines for contributing, whether it\u2019s code, documentation, or examples.</p>"},{"location":"contributing.html#how-to-contribute","title":"How to Contribute","text":"<p>You can contribute in several ways:</p> <ul> <li>Documentation: Fix typos, clarify sections, or add examples.  </li> <li>Examples: Add <code>.metta</code> files demonstrating features or standard library functions.  </li> <li>Bug Reports: Open an issue with clear steps to reproduce the problem.  </li> <li>Code Improvements: Suggest or implement enhancements to PeTTa functions.</li> </ul>"},{"location":"contributing.html#general-guidelines","title":"General Guidelines","text":"<ul> <li>Be respectful and collaborative in discussions.  </li> <li>Provide clear and concise descriptions for any changes or issues.  </li> <li>Use copyable code blocks in documentation.  </li> <li>Follow consistent formatting in examples and documentation.  </li> </ul>"},{"location":"contributing.html#pull-requests-prs","title":"Pull Requests (PRs)","text":"<ul> <li>Fork the repository and create a new branch for your changes.  </li> <li>Make your changes and commit with a descriptive message.  </li> <li>Push your branch and open a Pull Request on GitHub.  </li> <li>Maintainers will review and provide feedback if necessary.  </li> </ul> <p>Even small contributions like improving documentation or examples are appreciated!</p>"},{"location":"contributing.html#thank-you","title":"Thank You!","text":"<p>Every contribution helps make PeTTa better and easier to use. Your feedback, code, and examples help the community grow. \ud83d\ude80</p>"},{"location":"getting-started.html","title":"Getting Started","text":""},{"location":"getting-started.html#installation-getting-started-with-petta","title":"Installation &amp; Getting Started with PeTTa","text":"<p>Efficient MeTTa implementation in Prolog.</p> <p>Prerequisites</p> <p>Before you can run PeTTa, make sure your system has the following:</p>"},{"location":"getting-started.html#dependencies","title":"Dependencies","text":"<p>SWI-Prolog</p>"},{"location":"getting-started.html#operating-system","title":"Operating System","text":"<ul> <li>Linux, macOS, or Windows</li> </ul>"},{"location":"getting-started.html#swi-prolog","title":"SWI-Prolog","text":"<ul> <li>Version \u2265 9.x \u2013 the Prolog interpreter used to run PeTTa.</li> <li>Download SWI-Prolog</li> <li>Follow the installation instructions for your OS.</li> </ul>"},{"location":"getting-started.html#ubuntudebian-wsl","title":"Ubuntu/Debian/ WSL","text":"<pre><code>sudo apt update\nsudo apt install swi-prolog\n</code></pre>"},{"location":"getting-started.html#macos","title":"macOS","text":"<pre><code>brew install swi-prolog\n</code></pre>"},{"location":"getting-started.html#git","title":"Git","text":"<ul> <li>To clone the repository (if not already installed):</li> </ul> <pre><code>git --version\n</code></pre>"},{"location":"getting-started.html#quick-install","title":"Quick install","text":"<pre><code>git clone https://github.com/patham9/PeTTa.git\ncd PeTTa\n</code></pre>"},{"location":"getting-started.html#running-petta","title":"Running PeTTa","text":""},{"location":"getting-started.html#petta-comes-with-a-run-script-for-executing-metta-files","title":"PeTTa comes with a run script for executing .metta files.","text":"<pre><code>time sh run.sh ./examples/minnars.metta\n</code></pre>"},{"location":"getting-started.html#to-run-the-docs-server-locally-requires-mkdocs-installed","title":"To run the docs server locally (requires mkdocs installed)","text":"<pre><code>mkdocs serve\n</code></pre>"},{"location":"getting-started.html#tips","title":"tips","text":"<ul> <li>Keep SWI-Prolog up-to-date; PeTTa relies on modern Prolog features.</li> <li>Use the examples folder to learn the syntax before writing new programs.</li> <li>Always run .metta files from the repository root to avoid path issues.</li> </ul>"},{"location":"language-spec.html","title":"Language spec","text":""},{"location":"language-spec.html#docslanguage-specmd","title":"<code>docs/language-spec.md</code>","text":"<pre><code># Language Specification (summary)\n\n## Lexical elements\n- Identifiers: ...\n- Numbers: ints and floats\n- Comments: `; this is a comment` or `#`\n\n## Data types\n- Atom\n- Integer / Float\n- List\n- Map (if implemented)\n\n## Important semantics\n- Equality rules (note: int/float handling)\n- Pattern matching\n- Short examples for common constructs\n</code></pre>"},{"location":"standard-library/index.html","title":"Standard Library Overview","text":"<p>PeTTa comes with a set of additional functions that extend the capabilities of the base MeTTa language. These functions form the PeTTa Standard Library and provide convenient utilities for common operations.</p>"},{"location":"standard-library/index.html#what-is-the-petta-standard-library","title":"What is the PeTTa Standard Library?","text":"<ul> <li>The library includes functions for:</li> <li>Arithmetic operations (<code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>)</li> <li>List operations (<code>cons-atom</code>, <code>car-atom</code>, <code>decons-atom</code>, etc.)</li> <li>Logical operations (<code>and</code>, <code>or</code>, <code>not</code>)</li> <li>Comparison operations (<code>==</code>, <code>&lt;</code>, <code>&gt;</code>, etc.)</li> <li>Control flow (<code>if</code>, <code>case</code>)</li> <li> <p>Meta-level functions for introspection and advanced evaluation</p> </li> <li> <p>These functions are predefined and ready to use in PeTTa program.  </p> </li> <li>They are designed to simplify programming and reduce repetitive code.</li> </ul>"},{"location":"standard-library/index.html#how-to-use-the-standard-library","title":"How to Use the Standard Library","text":"<ol> <li>Simply write expressions using PeTTa functions in your <code>.metta</code> files.</li> <li>Functions are already loaded when you run PeTTa; no additional imports are required.</li> <li>Use examples in the <code>examples/</code> folder to understand behavior and expected output.</li> </ol> <p>you can check functions in the examples folder.</p> <pre><code>time sh run.sh./examples/test.metta\n</code></pre>"},{"location":"standard-library/controlflow.html","title":"control flow","text":""},{"location":"standard-library/controlflow.html#if","title":"if","text":"<p>(if (condition) (code to run if condition is true) (code to run if  condition is false))</p> <pre><code>!(if (&gt; 1 2) (3 4) (5 6))\n</code></pre> <p>output</p> <pre><code>[true]\n</code></pre>"},{"location":"standard-library/controlflow.html#case","title":"case","text":"<p>switchs based on the given variable condition</p> <pre><code>(= (casetest $x)\n   (case $x ((4 42)\n             ($otherpattern 44)\n             ($otherother $45))))\n\n!(casetest 5)\n</code></pre> <p>output</p> <pre><code>44\n</code></pre>"},{"location":"standard-library/higher-order.html","title":"Higher-order predicates","text":""},{"location":"standard-library/higher-order.html#higher-order-peridicates","title":"Higher Order Peridicates","text":""},{"location":"standard-library/higher-order.html#1-fold-flat","title":"1. fold-flat","text":"<p>process every element of a flat list one by one, combining them into a single final value using a custom rule</p> <pre><code>(fold-flat $list $acc $combiner)\nparams\n$list: list\n$acc:  accumulator\n$combiner: a combiner ( a function to process each element in the list)\n</code></pre> <pre><code>(= (sum-combiner $acc $x) ; helper function to  combine two elements.\n   (+ $acc $x))\n\n!(fold-flat (1 2 3 4) 0 sum-combiner)\n</code></pre> <p>output</p> <pre><code>10\n</code></pre>"},{"location":"standard-library/higher-order.html#2-fold-nested","title":"2. fold-nested","text":"<p>process every element of a nested list one by one, combining them into a single final value using a custom rule</p> <pre><code>(fold-flat $list $acc $combiner)\nparams\n$list: list\n$acc:  accumulator\n$combiner: a combiner ( a function to process each element in the list)\n</code></pre> <pre><code>(= (sum-combiner $acc $x)(+ $acc $x));helper function\n\n!(fold-nested (1 (2 3) (4 (5))) 0 sum-combiner)\n</code></pre> <p>output</p> <pre><code>15\n</code></pre>"},{"location":"standard-library/higher-order.html#3-map-flat","title":"3. map-flat","text":"<p>Transforms each element of a flat list individually using a given function, producing a new list of results, unlike fold-flat which reduces a list to a single value.</p> <pre><code>(= (double $x)(* $x 2))\n\n!(map-flat (1 2 3 4) double)\n</code></pre> <p>output</p> <pre><code>(2 4 6 8)\n</code></pre>"},{"location":"standard-library/higher-order.html#3-map-flat_1","title":"3. map-flat","text":"<p>Recursively transforms each atomic element of a nested list using a given function, preserving the nested structure, unlike map-flat which only works on flat lists.</p> <pre><code>(= (double $x) (* $x 2))\n\n!(map-nested (1 (2 3) (4 (5))) double)\n</code></pre> <p>output</p> <pre><code>(2 (4 6) (8 (10)))\n</code></pre>"},{"location":"standard-library/list-operations.html","title":"List Operations","text":""},{"location":"standard-library/list-operations.html#list-manipulation","title":"list Manipulation","text":""},{"location":"standard-library/list-operations.html#1-excludefast","title":"1. excludefast","text":"<p>removes all occurence of an atom from the list. if the element is not a member of the list,returns the list itself. </p> <pre><code>!(excludefast 5 (1 4 5 5))\n</code></pre> <p>output</p> <pre><code>(1 4)\n</code></pre> <pre><code>!(excludefast 0 (1 4 5 5))\n</code></pre> <p>output</p> <pre><code>(1 4 5 5)\n</code></pre>"},{"location":"standard-library/list-operations.html#2-memberfast","title":"2. memberfast","text":"<p>checks wether element is memebr of the list or not and returns a boolean value.</p> <pre><code>!(memberfast 0 (1 4 5))\n</code></pre> <p>output</p> <pre><code>false\n</code></pre>"},{"location":"standard-library/list-operations.html#3-car-atom","title":"3. car-atom","text":"<p>returns the first atom from the given list.</p> <pre><code>!(car-atom (1 2 4 3))\n</code></pre> <p>output</p> <pre><code>1\n</code></pre>"},{"location":"standard-library/list-operations.html#3-cdr-atom","title":"3. cdr-atom","text":"<p>returns the list except   from first atom in the list.</p> <pre><code>!(cdr-atom (1 2 4 3))\n</code></pre> <p>output</p> <pre><code>(2 4 3)\n</code></pre>"},{"location":"standard-library/list-operations.html#4-decons","title":"4. decons","text":"<pre><code>!(cdr-atom (1 2 4 3))\n</code></pre> <p>output</p> <pre><code>(1 (2 4 3))\n</code></pre>"},{"location":"standard-library/list-operations.html#5-cons","title":"5. cons","text":"<pre><code>appends the an atom at the first index of the list\n</code></pre> <pre><code>!(cons 0 (1 2 3))\n</code></pre> <p>output</p> <pre><code>(0 1 2 3)\n</code></pre>"},{"location":"standard-library/list-operations.html#6-is-expr","title":"6. is-expr","text":"<p>checks wether the input is expression or not and returns a boolean value. expression is anything emebeded in parenthsis.</p> <pre><code>!(is-expr (foo 3))\n</code></pre> <p>output</p> <pre><code>true\n</code></pre>"},{"location":"standard-library/list-operations.html#7-is-var","title":"7. is-var","text":"<p>checks wether the input is variable or not and returns a boolean value.</p> <pre><code>!(is-var $x)\n</code></pre> <p>output</p> <pre><code>true\n</code></pre>"},{"location":"standard-library/list-operations.html#8-substract","title":"8. substract","text":"<p>list based Subtraction </p> <pre><code>(subtract $pred $list $sub)\n\nparams\n$pred:  predicate\n$list: list\n$sub:  list to subtract\nthe default predicate is equal (==)\n</code></pre> <pre><code>!(subtract &gt;= (1 2 3) (2 3))\n</code></pre> <p>output</p> <pre><code>(1)\n</code></pre>"},{"location":"standard-library/list-operations.html#8-instersection","title":"8. instersection","text":"<p>list based intersection </p> <pre><code>!(intersection  (1 2 3 4) (2 3 5))\n</code></pre> <p>output</p> <pre><code>(2 3)\n</code></pre>"},{"location":"standard-library/list-operations.html#set-operations-in-petta","title":"set Operations in PeTTa","text":""},{"location":"standard-library/list-operations.html#1-union","title":"1. union","text":"<p>set based onion operation</p> <pre><code>!(union (1) (2 3 4 5))\n</code></pre> <p>output</p> <pre><code>(1 2 3 4 5)\n</code></pre>"},{"location":"standard-library/not-working-std-functions.html","title":"PeTTa unsupported MeTTa functions (Contemporary)","text":"<p>most of the previous MeTTa/MeTTalog standard library functions work well in PeTTa but some of them are not done yet so it is good to see this document before writing a code in PeTTa to got some intution on std functions.</p> <p>1. bind!</p> <pre><code>  !(bind! &amp;myspace (new-space)) \n</code></pre> <p>output</p> <pre><code>[(bind! &amp;myspace (new-space))]\n</code></pre>"},{"location":"standard-library/not-working-std-functions.html#work-around","title":"work around:","text":"<p>2. chain</p> <pre><code>  !(chain (+ 2 4) $x (* $x 3)) \n</code></pre> <p>output</p> <pre><code> ERROR:(main.pl path) Arguments are not sufficiently instantiated\n</code></pre>"},{"location":"standard-library/not-working-std-functions.html#work-around_1","title":"work around:","text":"<p>3. if-decons-expr</p> <pre><code>   !(if-decons-expr (1 2 3) $h $t (+ $h 1) (.....))\n</code></pre> <p>output</p> <pre><code> ERROR:(main.pl path) Arguments are not sufficiently instantiated\n</code></pre>"},{"location":"standard-library/not-working-std-functions.html#work-around_2","title":"work around:","text":""},{"location":"standard-library/not-working-std-functions.html#using-customized-functions-like-this","title":"using customized functions like this.","text":"<pre><code>(= (if-decons-expr-custom $list $h $t $then $else)\n      (if (or (== $list ()) (not (== (get-metatype $list) Expression)))\n            $else\n            (let* (\n                  ($h (car-atom $list))\n                  ($t (cdr-atom $list))\n                  )\n                  $then\n            )\n            ))\n</code></pre> <p>4. unique-atom</p> <pre><code>   !(unique-atom (1 2 3 4 3 3))  \n</code></pre> <p>output</p> <pre><code> [(unique-atom (1 2 3 4 3 3))]\n</code></pre>"},{"location":"standard-library/not-working-std-functions.html#work-around_3","title":"work around:","text":""},{"location":"standard-library/not-working-std-functions.html#_1","title":"PeTTa unsupported MeTTa functions (Contemporary)","text":"<p>5. cons-atom</p> <pre><code>    !(cons-atom 3 (6 4 5)) \n</code></pre> <p>output</p> <pre><code>  [(cons-atom 3 (6 4 5))]\n</code></pre>"},{"location":"standard-library/not-working-std-functions.html#work-around_4","title":"work around:","text":""},{"location":"standard-library/not-working-std-functions.html#_2","title":"PeTTa unsupported MeTTa functions (Contemporary)","text":"<p>6. decons-atom</p> <pre><code>    !(cons-atom 3 (6 4 5)) \n</code></pre> <p>output</p> <pre><code>  [(cons-atom 3 (6 4 5))]\n</code></pre>"},{"location":"standard-library/not-working-std-functions.html#work-around_5","title":"work around:","text":""},{"location":"standard-library/not-working-std-functions.html#_3","title":"PeTTa unsupported MeTTa functions (Contemporary)","text":""}]}